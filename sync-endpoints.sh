#!/bin/bash

# üîÑ TSA Unified Endpoint Synchronization Script
# Consolidates all endpoint fetching and frontend configuration updates

set -e

STAGE=${1:-dev}
REGION=${2:-us-east-2}

echo "üöÄ TSA Unified Endpoint Sync"
echo "================================================="
echo "üìç Stage: $STAGE"
echo "üåç Region: $REGION"
echo ""

# Function to get stack output value
get_stack_output() {
    local stack_name=$1
    local output_key=$2
    aws cloudformation describe-stacks \
        --stack-name "$stack_name" \
        --region "$REGION" \
        --query "Stacks[0].Outputs[?OutputKey=='$output_key'].OutputValue" \
        --output text 2>/dev/null || echo "NOT_FOUND"
}

# Function to get SSM parameter
get_ssm_parameter() {
    local param_name=$1
    aws ssm get-parameter \
        --name "$param_name" \
        --region "$REGION" \
        --output text \
        --query 'Parameter.Value' 2>/dev/null || echo ""
}

echo "üì° Fetching API endpoints from AWS..."
echo "================================================="

# Try SSM parameters first (preferred method)
echo "üîç Checking SSM Parameter Store..."
# ‚úÖ ARCHITECTURAL FIX: Standardized SSM parameter paths (single source of truth)
COACH_API=$(get_ssm_parameter "/tsa/$STAGE/api-urls/coach")
PARENT_API=$(get_ssm_parameter "/tsa/$STAGE/api-urls/parent") 
ADMIN_API=$(get_ssm_parameter "/tsa/$STAGE/api-urls/admin")
AUTH_API=$(get_ssm_parameter "/tsa/$STAGE/api-urls/auth")

# Fallback to CloudFormation outputs if SSM fails
if [ -z "$AUTH_API" ]; then
    echo "‚ö†Ô∏è  SSM lookup failed, trying CloudFormation outputs..."
    AUTH_API=$(get_stack_output "tsa-infra-auth-$STAGE" "PasswordlessApiUrl")
fi

if [ -z "$COACH_API" ]; then
    # Convert stage to title case (dev -> Dev, staging -> Staging, prod -> Prod)
    STAGE_TITLE=$(echo "$STAGE" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
    COACH_API=$(get_stack_output "tsa-coach-backend-$STAGE" "CoachAPIUrl${STAGE_TITLE}")
fi

if [ -z "$ADMIN_API" ]; then
    # Convert stage to title case (dev -> Dev, staging -> Staging, prod -> Prod)
    STAGE_TITLE=$(echo "$STAGE" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
    ADMIN_API=$(get_stack_output "tsa-admin-backend-$STAGE" "AdminAPIUrl${STAGE_TITLE}")
fi

# Clean up URLs (remove trailing slashes) and handle empty values
COACH_API=${COACH_API%/}
PARENT_API=${PARENT_API%/}
ADMIN_API=${ADMIN_API%/}
AUTH_API=${AUTH_API%/}

# Convert "NOT_FOUND" to empty string for environment variables
[ "$COACH_API" = "NOT_FOUND" ] && COACH_API=""
[ "$PARENT_API" = "NOT_FOUND" ] && PARENT_API=""
[ "$ADMIN_API" = "NOT_FOUND" ] && ADMIN_API=""

# Use placeholder for parent API if empty (not deployed yet)
if [ -z "$PARENT_API" ]; then
    PARENT_API="https://placeholder-parent-api.tsa.dev/"
fi

echo ""
echo "‚úÖ Current API Endpoints:"
echo "================================================="
echo "üèÉ Coach API:        ${COACH_API:-NOT_FOUND}"
echo "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Parent API:       ${PARENT_API:-NOT_FOUND}"
echo "üõ†Ô∏è  Admin API:        ${ADMIN_API:-NOT_FOUND}"
echo "üîê Passwordless Auth: ${AUTH_API:-NOT_FOUND}"
echo ""

# Validate required endpoints
if [ "$AUTH_API" = "NOT_FOUND" ] || [ -z "$AUTH_API" ]; then
    echo "‚ùå ERROR: Passwordless Auth API not found!"
    echo "üîß Deploy auth infrastructure: cd tsa-infrastructure && cdk deploy tsa-infra-auth-$STAGE"
    exit 1
fi

echo "üìù Updating frontend configurations..."
echo "================================================="

# Create environment file for platform frontend (coach + parent)
echo "üéØ Updating Platform Frontend (.env.local)..."
cat > "tsa-platform-frontend/.env.local" << EOF
# Auto-generated environment file - $(date)
# Generated by sync-endpoints.sh from AWS infrastructure

# API Endpoints
NEXT_PUBLIC_TSA_AUTH_API_URL=$AUTH_API
NEXT_PUBLIC_TSA_COACH_API_URL=${COACH_API}
NEXT_PUBLIC_TSA_PARENT_API_URL=${PARENT_API}
NEXT_PUBLIC_TSA_ADMIN_API_URL=${ADMIN_API}
NEXT_PUBLIC_PASSWORDLESS_AUTH_URL=$AUTH_API

# Legacy environment variables (for backward compatibility)
NEXT_PUBLIC_API_URL=${COACH_API}
NEXT_PUBLIC_ADMIN_API_URL=${ADMIN_API}

# Environment Configuration
NEXT_PUBLIC_ENVIRONMENT=${STAGE_ENV:-development}
NEXT_PUBLIC_STAGE=$STAGE
NEXT_PUBLIC_DEBUG_MODE=true

# Application Settings
NEXT_PUBLIC_APP_NAME=TSA Coach Portal ($(echo $STAGE | tr '[:lower:]' '[:upper:]'))
NEXT_PUBLIC_COGNITO_REGION=$REGION

# Feature Flags
NEXT_PUBLIC_SHOW_PERFORMANCE_METRICS=true
EOF

echo "‚úÖ Platform Frontend updated"

# Create environment file for admin frontend
echo "‚öôÔ∏è  Updating Admin Frontend (.env.local)..."
cat > "tsa-admin-frontend/.env.local" << EOF
# Auto-generated environment file - $(date)
# Generated by sync-endpoints.sh from AWS infrastructure

# API Endpoints
NEXT_PUBLIC_TSA_AUTH_API_URL=$AUTH_API
NEXT_PUBLIC_TSA_ADMIN_API_URL=${ADMIN_API}
NEXT_PUBLIC_TSA_COACH_API_URL=${COACH_API}
NEXT_PUBLIC_PASSWORDLESS_AUTH_URL=$AUTH_API

# Legacy environment variables (for backward compatibility)
NEXT_PUBLIC_ADMIN_API_URL=${ADMIN_API}
NEXT_PUBLIC_COACH_API_URL=${COACH_API}

# Environment Configuration
NEXT_PUBLIC_ENVIRONMENT=${STAGE_ENV:-development}
NEXT_PUBLIC_STAGE=$STAGE
NEXT_PUBLIC_DEBUG_MODE=true

# Application Settings
NEXT_PUBLIC_APP_NAME=TSA Admin Portal ($(echo $STAGE | tr '[:lower:]' '[:upper:]'))
EOF

echo "‚úÖ Admin Frontend updated"

echo ""
echo "üîç Testing endpoint connectivity..."
echo "================================================="

# Function to test endpoint
test_endpoint() {
    local name=$1
    local url=$2
    if [ -z "$url" ] || [ "$url" = "NOT_FOUND" ]; then
        echo "$name... ‚ö†Ô∏è  Not deployed"
        return
    fi
    echo -n "Testing $name... "
    if curl -s --max-time 5 "$url/health" >/dev/null 2>&1; then
        echo "‚úÖ OK"
    elif curl -s --max-time 5 "$url" >/dev/null 2>&1; then
        echo "‚úÖ OK (no health endpoint)"
    else
        echo "‚ö†Ô∏è  No response (may be normal)"
    fi
}

test_endpoint "Coach API" "$COACH_API"
test_endpoint "Parent API" "$PARENT_API"
test_endpoint "Admin API" "$ADMIN_API"
test_endpoint "Auth API" "$AUTH_API"

echo ""
echo "üéâ Endpoint synchronization complete!"
echo "================================================="
echo "üìã Next steps:"
echo "   1. Restart your frontend dev servers"
echo "   2. Clear browser cache if needed"
echo "   3. Test login functionality"
echo ""
echo "üí° Usage examples:"
echo "   ./sync-endpoints.sh           # Sync dev environment"
echo "   ./sync-endpoints.sh staging   # Sync staging environment"
echo "   ./sync-endpoints.sh prod      # Sync production environment"
echo ""

# Optional: Show current .env.local files
if [ "$3" = "--show-config" ]; then
    echo "üìÑ Current Platform Frontend .env.local:"
    echo "================================================="
    cat "tsa-platform-frontend/.env.local" | head -10
    echo "..."
    echo ""
    echo "üìÑ Current Admin Frontend .env.local:"
    echo "================================================="
    cat "tsa-admin-frontend/.env.local" | head -10
    echo "..."
fi 